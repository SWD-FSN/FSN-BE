-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.comments
(
    id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    author_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    post_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT comments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.conversations
(
    id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    name character varying(200) COLLATE pg_catalog."default",
    host_id character varying(100) COLLATE pg_catalog."default",
    members character varying(500) COLLATE pg_catalog."default",
    is_group boolean,
    is_delete boolean,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT conversations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.likes
(
    id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    author_id character varying(100) COLLATE pg_catalog."default",
    object_id character varying(100) COLLATE pg_catalog."default",
    object_type character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT likes_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.messages
(
    id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    author_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    conversation_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT messages_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    actor_id character varying(100) COLLATE pg_catalog."default",
    object_id character varying(100) COLLATE pg_catalog."default",
    object_type character varying(10) COLLATE pg_catalog."default",
    action character varying(50) COLLATE pg_catalog."default",
    is_read boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT notifications_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.posts
(
    id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    author_id character varying(100) COLLATE pg_catalog."default",
    content text COLLATE pg_catalog."default" NOT NULL,
    attachment text COLLATE pg_catalog."default",
    is_private boolean NOT NULL,
    is_hidden boolean NOT NULL,
    status boolean NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT posts_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    role_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    active_status boolean NOT NULL DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT roles_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.social_requests
(
    id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    author_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    account_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT social_requests_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.user_securities
(
    user_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    access_token text COLLATE pg_catalog."default",
    refresh_token text COLLATE pg_catalog."default",
    action_token text COLLATE pg_catalog."default",
    fail_access integer DEFAULT 0,
    last_fail timestamp without time zone,
    CONSTRAINT user_securities_pkey PRIMARY KEY (user_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    role_id character varying(100) COLLATE pg_catalog."default",
    full_name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    username character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    date_of_birth date,
    profile_avatar character varying(255) COLLATE pg_catalog."default",
    bio text COLLATE pg_catalog."default",
    friends text COLLATE pg_catalog."default",
    followers text COLLATE pg_catalog."default",
    followings text COLLATE pg_catalog."default",
    block_users text COLLATE pg_catalog."default",
    conversations text COLLATE pg_catalog."default",
    is_private boolean DEFAULT false,
    is_active boolean DEFAULT true,
    is_activated boolean,
    is_have_to_reset_password boolean,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email)
);

ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT fk_comment_post FOREIGN KEY (post_id)
    REFERENCES public.posts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT fk_comment_user FOREIGN KEY (author_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.conversations
    ADD CONSTRAINT fk_conversation_user FOREIGN KEY (host_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.likes
    ADD CONSTRAINT fk_like_comment FOREIGN KEY (object_id)
    REFERENCES public.comments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.likes
    ADD CONSTRAINT fk_like_post FOREIGN KEY (object_id)
    REFERENCES public.posts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.likes
    ADD CONSTRAINT fk_like_user FOREIGN KEY (author_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.messages
    ADD CONSTRAINT fk_message_conversation FOREIGN KEY (conversation_id)
    REFERENCES public.conversations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.messages
    ADD CONSTRAINT fk_message_user FOREIGN KEY (author_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT fk_notification_comment FOREIGN KEY (object_id)
    REFERENCES public.comments (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT fk_notification_post FOREIGN KEY (object_id)
    REFERENCES public.posts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT fk_notification_user FOREIGN KEY (actor_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT fk_notification_user1 FOREIGN KEY (object_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.posts
    ADD CONSTRAINT fk_post_user FOREIGN KEY (author_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.social_requests
    ADD CONSTRAINT fk_socialrequest_receiver FOREIGN KEY (account_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.social_requests
    ADD CONSTRAINT fk_socialrequest_sender FOREIGN KEY (author_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.user_securities
    ADD CONSTRAINT fk_usersecurity_user FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS user_securities_pkey
    ON public.user_securities(user_id);


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT fk_user_role FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;    